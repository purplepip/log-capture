plugins {
  id "com.diffplug.gradle.spotless" version "3.16.0"
}

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: "jacoco"
apply plugin: 'com.diffplug.gradle.spotless'

group = 'com.purplepip'
version = '1.0.1-SNAPSHOT'
description = "Log capture"

ext {
  junitVersion      = "5.3.1"
  logbackVersion    = "1.2.3"
  slf4jVersion      = "1.7.25"
}
jacoco.toolVersion  = "0.8.2"

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
}

configurations {
  deployerJars
}

dependencies {
  compile group: 'org.slf4j', name: 'slf4j-api', version:slf4jVersion
  compile group: 'ch.qos.logback', name: 'logback-classic', version:logbackVersion
  deployerJars group: 'io.packagecloud.maven.wagon', name: 'maven-packagecloud-wagon', version:"0.0.6"
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version:junitVersion
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version:junitVersion
}

test {
  useJUnitPlatform()
  testLogging {
    showStandardStreams = true
  }
  finalizedBy jacocoTestReport
}

spotless {
  java {
    googleJavaFormat()
  }
}

repositories {
  maven { url "https://packagecloud.io/purplepip/releases/maven2" }
  maven { url "http://repo.maven.apache.org/maven2" }
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifactId = 'log-capture'
      pom {
        url = 'http://purplepip.com'
        licenses {
          license {
            name = 'The Apache License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
          }
        }
        scm {
          connection = 'scm:git:git@github.com:purplepip/log-capture.git'
          developerConnection = 'scm:git:git@github.com:purplepip/log-capture.git'
          url = 'git@github.com:purplepip/log-capture.git'
        }
      }
    }
  }
  repositories {
    maven {
      def releasesUrl = 'packagecloud+https://packagecloud.io/purplepip/releases'
      def snapshotUrl = 'packagecloud+https://packagecloud.io/purplepip/snapshots'
      url = version.endsWith('SNAPSHOT') ? snapshotUrl : releasesUrl
    }
  }
}

uploadArchives {
  repositories.mavenDeployer {
    configuration = configurations.deployerJars
    def releasesUrl = 'packagecloud+https://packagecloud.io/purplepip/releases'
    def snapshotUrl = 'packagecloud+https://packagecloud.io/purplepip/snapshots'
    def repositoryUrl = version.endsWith('SNAPSHOT') ? snapshotUrl : releasesUrl
    repository(url: repositoryUrl) {
      authentication(password: project.properties.'deploy.password')
    }
  }
}